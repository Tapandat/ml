{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyN0wFEPqBhf++at7Ij0TCVq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"aV040EfTYTaN"},"outputs":[],"source":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","def load_data(file_path):\n","    \"\"\"Load the dataset from the given file path.\"\"\"\n","    data = pd.read_csv(file_path)\n","    return data\n","\n","def study_attributes(data):\n","    \"\"\"Study the data type and unique values for each attribute.\"\"\"\n","    attributes_info = {}\n","    for column in data.columns:\n","        attributes_info[column] = {}\n","'dtype': data[column].dtype,\n","            'unique_values': data[column].unique()\n","        }\n","    return attributes_info\n","\n","def identify_encoding_schemes(data):\n","    \"\"\"Identify encoding schemes for categorical attributes.\"\"\"\n","    encoding_schemes = {}\n","    for column in data.select_dtypes(include=['object', 'category']):\n","if data[column].nunique() < 10:  # Presume ordinal if less than unique values\n","            encoding_schemes[column] = 'Label Encoding'\n","        else:\n","            encoding_schemes[column] = 'One-Hot Encoding'\n","    return encoding_schemes\n","\n","def explore_numeric_variables(data ):\n","\"…\"Study numeric variables for range, mean, and variance.\".…\n"," numeric_info = {}\n","numeric_columns = data.select_dtypes(include=[np.number]).columns\n","for column in numeric_columns:\n","    numeric_info[column] = {\n","        'range': (data[column].min(), data[column].max()),\n","        'mean': data[column].mean(),\n","'std_dev': data[column].std(),\n","            'missing_values': data[column].isnull().sum(),\n","            'outliers': identify_outliers(data[column])\n","        }\n","    return numeric_info\n","\n","def identify_outliers(series):\n","    \"\"\"Help on identifying outliers by the IQR method.\"\"\"\n","    Q1 = series.quantile(0.25)\n","Q3 = series.quantile(0.75)\n","    IQR = Q3 - Q1\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","    return series[(series < lower_bound) | (series > upper_bound)]\n","\n","def main():\n","    # Load the dataset\n","    file_path = 'thyroid0387_UCI.csv'\n","data = load_data(file_path)\n","\n","    # Study attributes\n","    attributes_info = study_attributes(data)\n","    print(\"Attributes Information:\")\n","    for attr, info in attributes_info.items():\n","        print(f\"{attr}: {info}\")\n","\n","    # Identify encoding schemes\n","    encoding_schemes = identify_encoding_schemes(data)\n","    print(\"\n","Encoding Schemes:\")\n","    for attr, scheme in encoding_schemes.items():\n","print(f\"{attr}: {scheme}\")\n","\n","    # Look at numeric variables\n","    numeric_info = explore_numeric_variables(data)\n","    print(\"\n","Numeric Variables Information:\")\n","    for attr, info in numeric_info.items():\n","        print(f\"{attr}: Range: {info['range']}, Mean: {info['mean']}, Std Dev: {info['std_dev']}, Missing Values: {info['missing_values']}, Outliers: {info['outliers'].count()}\")\n","\n","# Run the main program\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"hPUwMX6-YWth"},"execution_count":null,"outputs":[]}]}